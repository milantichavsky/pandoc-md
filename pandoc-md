#!/bin/bash
#########################
# This script is used for converting .md files to .html files through utility called pandoc (which has to be
# installed on the machine). It lets you specify an array of directories or files in arguments, so you don't
# have to convert them manually one by one. Script is able to check if the .html file is up to date so it does
# not get recompiled (based on the modification date). Other options let you set a stylesheet for the resulting
# file (you can also use an environment variable `PANDOC_MD_STYLE to set a default one) and use a recursive
# conversion, which converts also files in subdirectories. For usage info see `pandoc-md -h`.
########################

# This calls pandoc utility.
# `--quiet` to suppress warning messages, most of them just tell you that the header have not been specified.
# Either `--css=pandoc.css` or `-c pandoc.css` for specifying stylesheet
pandoc_conversion() {
  if [ "$stylesheet" = "" ]; then
    # No stylesheet given by the user. Hence trying to use the path in the environment  variable PANDOC_MD_STYLE.
    if [ "$PANDOC_MD_STYLE" = "" ]; then
      pandoc --quiet -s "$file" -o "${file%.md}.html"
    else
      pandoc --quiet -c "${PANDOC_MD_STYLE}" -s "$file" -o "${file%.md}.html"
    fi
  else
    pandoc --quiet -c "${stylesheet}" -s "$file" -o "${file%.md}.html"
  fi
  echo "File $file was compiled to html."
}

# If file has a corresponding .html file already generated, modification dates are compared and based on this
# information .html file is either recompiled or not. If there is no .html file yet, it is generated.
convert_file_if_it_is_not_up_to_date() {
  local htmlFile="${file%.md}.html"

  if [ -f "$htmlFile" ]; then
    # True if `file` (.md file) is newer than `htmlFile` (according to modification date).
    if [ "$file" -nt "$htmlFile" ]; then
      pandoc_conversion
    fi
  else
    pandoc_conversion
  fi
}

forced_recursive_dir_conversion() {
  for a in "$path"/*; do
    if [ -d "$a" ]; then
      path=$a
      convert_directory
    elif [ -f "$a" ]; then
      if [[ $a == *.md ]]; then
        file="$a"
        pandoc_conversion
      fi
    fi
  done
}

forced_nonrecursive_dir_conversion() {
  for file in "${path}/"*.md; do
    pandoc_conversion
  done
}

unforced_recursive_dir_conversion() {
  for a in "$path"/*; do
    if [ -d "$a" ]; then
      path=$a
      convert_directory
    elif [ -f "$a" ]; then
      if [[ $a == *.md ]]; then
        file="$a"
        convert_file_if_it_is_not_up_to_date
      fi
    fi
  done
}

unforced_nonrecursive_dir_conversion() {
  for file in "${path}/"*.md; do
    convert_file_if_it_is_not_up_to_date
  done
}

# Goes through every .md file in the directory.
# If force option was chosen, it converts all files. Otherwise only those not up to date are converted.
# If recursive option was chosen, even files in subdirectories will be converted.
convert_directory() {
  if $force; then
    if $recursive; then
      forced_recursive_dir_conversion
    else
      forced_nonrecursive_dir_conversion
    fi
  else
    if $recursive; then
      unforced_recursive_dir_conversion
    else
      unforced_nonrecursive_dir_conversion
    fi
  fi
}

convert_current_directory() {
  path=$(pwd)
  convert_directory
}

convert_directory_array() {
  for path in "${directories[@]}"; do
    convert_directory
  done
}

# Converts every file from the `files` array. Checks if the $file starts with `/` and based on that decides
# whether an absolute or relative path was used.
# If force = true, it will convert files even if they are up to date.
# If recursive = true, even files in subdirectories will be converted.
convert_file_array() {
  if $force; then
    for file in "${files[@]}"; do
      firstchar=${file:0:1}
      if [ "$firstchar" = '/' ]; then
        pandoc_conversion
      else
        file="$(pwd)/$file"
        pandoc_conversion
      fi
    done
  else
    for file in "${files[@]}"; do
      firstchar=${file:0:1}
      if [ "$firstchar" = '/' ]; then
        convert_file_if_it_is_not_up_to_date
      else
        file="$(pwd)/$file"
        convert_file_if_it_is_not_up_to_date
      fi
    done
  fi
}

output_usage_info() {
  # `-e` enables character escaping
  echo -e "USAGE:
\t icaled [options] [paths]
\t -h \t show help

SWITCH OPTIONS (one of these is mandatory)

\t -d   convert specified directories
\t -i   convert specified files
\t -t   convert this (local) folder

OPTIONAL OPTIONS

\t -s   choose stylesheet to be linked to the resulting .html files
\t -f   force option - skips the check if files are up to date
\t -r   recursively convert folders (convert files in the working directory and in all containing directories)

If you keep using the same style file for the most of your scripts, you can set an environment variable PANDOC_MD_STYLE to contain a path to that script. The path in PANDOC_MD_STYLE will be used by default (that is when you don't use -s option)."
}

######## Main script logic starts here ########

# Switch variable lets us decide whether the app will convert files, directories or this directory.
# Force and recursive are on/off variables.
# Stylesheet holds path to the stylesheet path of the `.html` file, defaults to no stylesheet at all.
switch_variable=""
force=false
recursive=false
while getopts ":ditfs:r" opt; do
  case $opt in
  d) switch_variable="dirs" ;;
  i) switch_variable="files" ;;
  t) switch_variable="this" ;;
  f) force=true ;;
  s) stylesheet=$OPTARG ;;
  r) recursive=true ;;
  \?) output_usage_info ;;
  esac
done

case $switch_variable in
"this") convert_current_directory ;;
"dirs")
  shift $(($OPTIND - 1))
  directories=()
  # while $1 is not null or empty
  while [ -n "$1" ]; do
    directories+=($1)
    shift
  done
  convert_directory_array
  ;;
"files")
  shift $(($OPTIND - 1))
  files=()
  while [ -n "$1" ]; do
    files+=($1)
    shift
  done
  convert_file_array
  ;;
esac
