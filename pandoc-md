#!/bin/bash
#########################
# This script is used for converting .md files to .html files through utility called pandoc (which has to be
# installed on the machine). It lets you specify array of directories or files in arguments, so you don't
# have to convert them manually one by one. Script also checks for existing html files and if they are
# up to date (based on modification date difference between .md & .html) they don't get recompiled
# to prevent unnecessary writes.
########################

# This calls pandoc utility.
# `--quiet` to suppress warning messages, most of them just tell you that the header have not been specified.
# Either `--css=pandoc.css` or `-c pandoc.css` for specifying stylesheet
pandoc_conversion() {
  if [ "$stylesheet" = "" ]; then
    # no stylesheet given by the user
    pandoc --quiet -s "$file" -o "${file%.md}.html"
  else
    pandoc --quiet -c "${stylesheet}" -s "$file" -o "${file%.md}.html"
  fi
  echo "File $file was compiled to html."
}

# If file has a corresponding .html file already generated, modification dates are compared and based on this
# information .html file is either recompiled or not. If there is no .html file yet, it is generated.
convert_file_if_it_is_not_up_to_date() {
  local htmlFile="${file%.md}.html"

  if [ -f "$htmlFile" ]; then
    # True if `file` (.md file) is newer than `htmlFile` (according to modification date).
    if [ "$file" -nt "$htmlFile" ]; then
      pandoc_conversion
    fi
  else
    pandoc_conversion
  fi
}

# Goes through every .md file in the directory. If force option was chosen, it converts all files.
# Otherwise only those not up to date are converted.
convert_directory() {
  if [ "$force" = "true" ]; then
    for file in "${path}/"*.md; do
      pandoc_conversion
    done
  else
    for file in "${path}/"*.md; do
      convert_file_if_it_is_not_up_to_date
    done
  fi
}

convert_current_directory() {
  path=$(pwd)
  convert_directory
}

convert_directory_array() {
  for path in "${directories[@]}"; do
    convert_directory
  done
}

# Converts every file from the `files` array. Checks if the $file starts with `/` and based on that decides
# whether an absolute or relative path was used.
# If force = true, it will convert files even if they are up to date.
convert_file_array() {
  if [ "$force" = "true" ]; then
    for file in "${files[@]}"; do
      firstchar=${file:0:1}
      if [ "$firstchar" = '/' ]; then
        pandoc_conversion
      else
        file="$(pwd)/$file"
        pandoc_conversion
      fi
    done
  else
    for file in "${files[@]}"; do
      firstchar=${file:0:1}
      if [ "$firstchar" = '/' ]; then
        convert_file_if_it_is_not_up_to_date
      else
        file="$(pwd)/$file"
        convert_file_if_it_is_not_up_to_date
      fi
    done
  fi
}

output_usage_info() {
  echo "To be implemented"
}

######## Main script logic starts here ########

# switch variable lets us decide whether the app will convert files, directories or this directory
# force and recursive are on/off variables
# stylesheet holds path to the stylesheet path of the .html file, defaults to no stylesheet at all
switch_variable=""
force=""
while getopts ":ditfs:r" opt; do
  case $opt in
  d) switch_variable="dirs" ;;
  i) switch_variable="files" ;;
  t) switch_variable="this" ;;
  f) force="true" ;;
  s) stylesheet=$OPTARG ;;
  r) recursive="true" ;; # not implemented yet
  \?) output_usage_info ;; # not implemented yet
  esac
done

case $switch_variable in
"this") convert_current_directory ;;
"dirs")
  shift $(($OPTIND - 1))
  directories=()
  # while $1 is not null or empty
  while [ -n "$1" ]; do
    directories+=($1)
    shift
  done
  convert_directory_array
  ;;
"files")
  shift $(($OPTIND - 1))
  files=()
  while [ -n "$1" ]; do
    files+=($1)
    shift
  done
  convert_file_array
  ;;
esac
